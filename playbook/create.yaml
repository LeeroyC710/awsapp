- hosts: localhost
  connection: local
  tasks:
  - name: "generate key pair"
    openssh_keypair:
      path: ~/.ssh/ansible_id_rsa
      state: present
  - name: "create key pair using key_material obtained using 'file' lookup plugin"
    ec2_key:
      name: CloudFormationKeyPair
      key_material: "{{ lookup('file', '~/.ssh/ansible_id_rsa.pub') }}"
      state: present
  - name: "create a simple stack"
    cloudformation:
      state: present
      stack_name: test-stack
      region: eu-west-2
      template: stack.yaml
  - cloudformation_info:
      stack_name: test-stack
      stack_resources: true
    register: output
  - ec2_instance_info:
      instance_ids: "{{ output['cloudformation']['test-stack']['stack_resource_list'] | json_query(query) }}"
    vars:
      query: "[?ResourceType=='AWS::EC2::Instance'].PhysicalResourceId"
    register: ec2
  - set_fact:
      ec2_instances: "{{ ec2['instances'] | map(attribute='public_dns_name') | list }}"
  - name: "build inventory"
    add_host:
      name: "{{ item }}"
      ansible_user: ubuntu
      ansible_ssh_private_key_file: ~/.ssh/ansible_id_rsa
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o ConnectTimeout=60'
    with_items: "{{ ec2_instances }}"
- hosts: all
  become: true
  gather_facts: no
  tasks:
  - name: "Wait for system to become reachable"
    wait_for_connection:
  - name: "Gather facts for first time"
    setup:
  - name: "Install Dependencies"
    apt:
      name:
      - nginx
      - git
      state: latest
      update_cache: true
  - name: "nginx configuration"
    copy:
      src: ./nginx
      dest: ./awsapp/nginx/nginx.conf
      owner: root
      group: root
      mode: 0644
    register: nginx_config
  - name: "reload nginx"
    service:
      name: nginx
      state: reloaded
    when: nginx_config.changed
  - name: "awsapp"
    git:
      repo: "https://github.com/LeeroyC710/awsapp.git"
      dest: "/opt/awsapp"
      force: yes 
  - name: docker-prerequisites
    apt:
      pkg:
      - apt-transport-https   
      - ca-certificates
      - curl
      - gnupg2
      - software-properties-common
      - python3-pip
      - python-pip
      - git
      state: latest
      update_cache: true
  - name: docker
    pip:
      name: docker
  - name: json
    pip:
      name: jsondiff
  - name: yaml
    pip:
      name: pyyaml
  - name: compose
    pip:
      name: docker-compose   
  - name: Docker GPG key
    apt_key: 
      url: "https://download.docker.com/linux/ubuntu/gpg"
      state: present
  - name: Docker repository
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/debian stretch stable"
      state: present
      update_cache: true
  - name: Docker install
    apt:
      pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      state: latest
      update_cache: true
  - name: docker service
    service:
      name: docker
      state: started   
  - name: docker group
    shell: usermod -aG docker $(whoami)
  - name: pip install for docker
    apt:
      name: python-pip
      state: latest
      update_cache: true
  - name: pip install docker sdk
    pip:
      name: docker
  - name: docker create registry container
    docker_container:
      name: registry
      image: registry
      ports:
      - "5000:5000"
  - name: install docker compose
    shell: curl https://raw.githubusercontent.com/TomLLew/Scripts/master/Docker-Install-Script.sh | sudo bash

#_______________________________________________API GATEWAY SET-UP__________________________________________________
# Update API resources for development
#- name: update API
# aws_api_gateway:
#    api_id: 'abc123321cba'
#    state: present
#    swagger_file: my_api.yml

#_______________________________________update definitions and deploy API to production__________________________________
#- name: deploy API
#  aws_api_gateway:
#    api_id: 'abc123321cba'
#    state: present
#    swagger_file: my_api.yml
#    stage: production
#    deploy_desc: Make auth fix available.
